name: Create Jira issue on PR open
on:
  pull_request:
    types: [ review_requested ]
env:
  JIRA_URL: ${{ secrets.JIRA_URL }}
  PROJECT_KEY: ${{ secrets.JIRA_PROJECT_KEY }}
  ISSUE_TYPE: ${{ secrets.JIRA_ISSUE_TYPE }}
  SUB_ISSUE_TYPE: ${{ secrets.JIRA_SUB_ISSUE_TYPE }}
  JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
  JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
  JIRA_AUTH: "${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}"
jobs:
  add_reviewer:
    if: github.event_name == 'pull_request' && github.event.action == 'review_requested'
    runs-on: ubuntu-latest
    env:
      PR_NUMBER: ${{ github.event.pull_request.number }}
      REVIEWER_LOGIN: ${{ github.event.review.user.login }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Get assignee ID
        id: pr-details
        run: |
          key=${{ github.event.pull_request.assignee.login }}
          assignee_id=$(echo '${{ secrets.JIRA_GITHUB_MAPPING }}' | jq -r --arg key "${{ github.event.pull_request.assignee.login }}" '.[$key]')
          echo "assignee_id=${assignee_id}" >> $GITHUB_ENV
          echo "reviewers=${{ join(github.event.pull_request.requested_reviewers.*.login, ',') }}" >> $GITHUB_OUTPUT
          echo "reviewers=${reviewers}"
      - name: Search
        id: search
        uses: tomhjp/gh-action-jira-search@v0.2.2
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
        with:
          jql: 'project = "${{ env.PROJECT_KEY }}" AND text ~ "#${{ env.PR_NUMBER }} " AND assignee = "${{ env.assignee_id }}"'
      - name: Log
        run: echo "Found issue ${{ steps.search.outputs.issue }}"
      - name: Create reviewer subtask
        env:
          PARENT_ISSUE: ${{ steps.search.outputs.issue }}
          REVIEWERS: ${{ steps.pr-details.outputs.reviewers }}
        run: |
          for reviewer in $(echo ${{ env.REVIEWERS }} | tr ',' '\n'); do
          subtasks=$(curl -s --request GET \
            --url "${{ env.JIRA_URL }}/rest/api/3/issue/${{ env.PARENT_ISSUE }}" \
            --user "${{ env.JIRA_USER_EMAIL }}:${{ env.JIRA_API_TOKEN }}" \
            --header "Accept: application/json")
            
            subtask_count=$(echo "$subtasks" | jq '.fields.subtasks | length')
            
            if [ "$subtask_count" -gt 0 ]; then
            assignees=$(echo "$subtasks" | jq -r '.fields.subtasks[].fields.assignee.name')
            echo "::set-output name=assignees::$assignees"
            else
            echo "::set-output name=assignees::"
            fi
          
            if echo "$assignees" | grep -q "^${reviewer}$"; then
              echo "Subtask already created for reviewer: $reviewer"
            else
              echo "Subtask not yet created for reviewer: $reviewer. Creating subtask for reviewer."
              key=${reviewer}
                reviewer_id=$(echo '${{ secrets.JIRA_GITHUB_MAPPING }}' | jq -r --arg key "${reviewer}" '.[$key]')
                echo "Reviewer: ${reviewer_id}"
                curl -s -X POST \
                --url "${{ env.JIRA_URL }}/rest/api/3/issue/" \
                --header "Content-Type: application/json" \
                --header "Accept: application/json" \
                --user "${{ env.JIRA_USER_EMAIL }}:${{ env.JIRA_API_TOKEN }}" \
                --data '{
                  "fields": {
                    "project": {
                      "key": "'"${{ env.PROJECT_KEY }}"'"
                    },
                    "parent": {
                      "key": "'"${{ env.PARENT_ISSUE }}"'"
                    },
                    "issuetype": {
                      "name": "'"${{ env.SUB_ISSUE_TYPE }}"'"
                    },
                    "summary": "'"${GITHUB_REPOSITORY#${GITHUB_OWNER}}#${PR_NUMBER} - ${PR_TITLE} - Reviewed by ${reviewer}"'",
                    "assignee": {
                      "accountId": "'"${reviewer_id}"'"
                    }
                  }
                }' > jira-subtask.json
                cat jira-subtask.json
                SUBTASK_KEY=$(cat jira-subtask.json | jq -r '.key')
            fi
          done