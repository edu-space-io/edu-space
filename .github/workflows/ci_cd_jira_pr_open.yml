name: Create Jira issue on PR open
on:
  pull_request:
    types: [ opened ]
  pull_request_review:
    types: [ submitted ]
env:
  JIRA_URL: ${{ secrets.JIRA_URL }}
  PROJECT_KEY: ${{ secrets.JIRA_PROJECT_KEY }}
  ISSUE_TYPE: ${{ secrets.JIRA_ISSUE_TYPE }}
  JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
  JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
  JIRA_AUTH: "${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}"
jobs:
  create_jira_issue:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Get PR details
        id: pr-details
        run: |
          echo "branch=${{ github.event.pull_request.head.ref }}" >> $GITHUB_OUTPUT
          echo "title=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
          echo "description=${{ github.event.pull_request.body }}" >> $GITHUB_OUTPUT
          echo "assignee=${{ github.event.pull_request.user.login }}" >> $GITHUB_OUTPUT
          echo "number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          echo "reviewers=${{ join(github.event.pull_request.requested_reviewers.*.login, ',') }}" >> $GITHUB_OUTPUT
      - name: Create Jira issue for assignee
        id: create-assigned-issue
        env:
          DESCRIPTION: ${{ steps.pr-details.outputs.description }}
          ASSIGNEE: ${{ steps.pr-details.outputs.assignee }}
          PR_NUMBER: ${{ steps.pr-details.outputs.number }}
          PR_TITLE: ${{ steps.pr-details.outputs.title }}
        run: |
          key=${{ env.ASSIGNEE }}
          echo "ASSIGNEE: ${ASSIGNEE}"
          assignee_id=$(echo '${{ secrets.JIRA_GITHUB_MAPPING }}' | jq -r --arg key "${{ env.ASSIGNEE }}" '.[$key]')
          echo "ASSIGNEE ID: ${assignee_id}"
          curl -s -X POST \
          --url "${{ env.JIRA_URL }}/rest/api/2/issue/" \
          --header "Content-Type: application/json" \
          --header "Accept: application/json" \
          --user "${{ env.JIRA_USER_EMAIL }}:${{ env.JIRA_API_TOKEN }}" \
          -d '{
            "fields": {
              "project": {
                  "key": "'"${{ env.PROJECT_KEY }}"'"
              },
              "issuetype": {
                  "name": "'"${{ env.ISSUE_TYPE }}"'"
              },
              "summary": "'"${GITHUB_REPOSITORY#${GITHUB_OWNER}}#${PR_NUMBER} - ${PR_TITLE}"'",
              "description": "'"${{ env.DESCRIPTION }}"'",
              "assignee": {
                "accountId": "'"${assignee_id}"'"
              }
            }
          }' > jira-issue.json
          # Parse issue key from Jira response
          cat jira-issue.json
          assignee_issue_key=$(cat jira-issue.json | jq -r '.key')
          echo "assignee-issue-key=${assignee_issue_key}" >> $GITHUB_OUTPUT
      - name: Create Jira issues for reviewers
        env:
          DESCRIPTION: ${{ steps.pr-details.outputs.description }}
          REVIEWERS: ${{ steps.pr-details.outputs.reviewers }}
          ASSIGNEE_ISSUE_KEY: ${{ steps.create-assigned-issue.outputs.assignee-issue-key }}
          PR_NUMBER: ${{ steps.pr-details.outputs.number }}
          PR_TITLE: ${{ steps.pr-details.outputs.title }}
        run: |
          for reviewer in $(echo ${{ env.REVIEWERS }} | tr ',' '\n'); do
            key=${reviewer}
            reviewer_id=$(echo '${{ secrets.JIRA_GITHUB_MAPPING }}' | jq -r --arg key "${reviewer}" '.[$key]')
            echo "Reviewer: ${reviewer_id}"
            curl -s -X POST \
            --url "${{ env.JIRA_URL }}/rest/api/2/issue/" \
            --header "Content-Type: application/json" \
            --header "Accept: application/json" \
            --user "${{ env.JIRA_USER_EMAIL }}:${{ env.JIRA_API_TOKEN }}" \
            --data '{
              "fields": {
                "project": {
                  "key": "'"${{ env.PROJECT_KEY }}"'"
                },
                "parent": {
                  "key": "'"${{ env.ASSIGNEE_ISSUE_KEY }}"'"
                },
                "issuetype": {
                  "name": "Sub-task"
                },
                "summary": "'"${GITHUB_REPOSITORY#${GITHUB_OWNER}}#${PR_NUMBER} - ${PR_TITLE} - Reviewed by ${reviewer}"'",
                "assignee": {
                  "accountId": "'"${reviewer_id}"'"
                }
              }
            }' > jira-subtask.json
            cat jira-subtask.json
            SUBTASK_KEY=$(cat jira-subtask.json | jq -r '.key')
          done

  update_subtasks:
    if: github.event_name == 'pull_request_review' && github.event.review.state == 'approved'
    runs-on: ubuntu-latest
    env:
      PR_NUMBER: ${{ github.event.pull_request.number }}
    steps:
      - name: Get reviewer ID
        id: get-reviewer-id
        run: |
          key=${{ github.event.review.user.login }}
          echo "assignee=${{ github.event.pull_request.user.login }}" >> $GITHUB_OUTPUT
          reviewer_id=$(echo '${{ secrets.JIRA_GITHUB_MAPPING }}' | jq -r --arg key "${{ github.event.review.user.login }}" '.[$key]')
          echo "reviewer_id=${reviewer_id}" >> $GITHUB_ENV
          echo "reviewer_id=${reviewer_id}"
      - name: Search
        id: search
        uses: tomhjp/gh-action-jira-search@v0.2.2
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
        with:
          jql: 'project = "${{ env.PROJECT_KEY }}" AND text ~ "#${{ env.PR_NUMBER }} " AND assignee = "${{ env.reviewer_id }}"'
      - name: Log
        run: echo "Found issue ${{ steps.search.outputs.issue }}"
      - name: Get Transition ID
        id: get-transition-id
        run: |          
          curl --request GET \
            --url "${{ env.JIRA_URL }}/rest/api/3/issue/${{ steps.search.outputs.issue }}/transitions" \
            --user "${{ env.JIRA_USER_EMAIL }}:${{ env.JIRA_API_TOKEN }}" \
            --header "Accept: application/json" > transition.json
          cat transition.json
          transition_id=$(cat transition.json | jq -r '.transitions[] | select(.name == "Done") | .id')
          echo "transition_id=${transition_id}" >> $GITHUB_ENV
          echo "transition_id = ${transition_id}"
      - name: Change reviewer issue status
        run: |
          curl -s --request POST \
          --url "${{ env.JIRA_URL }}/rest/api/3/issue/${{ steps.search.outputs.issue }}/transitions" \
          --user "${{ env.JIRA_USER_EMAIL }}:${{ env.JIRA_API_TOKEN }}" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data '{
            "transition": {
              "id": "${{ env.transition_id }}"
            },
            "fields": {}
          }' > transition.json
          cat transition.json
      - name: Update first or second review time
        run: |
          # Get the current field values of first_review_time and second_review_time
          fields=$(curl -s --request GET \
            --url "${{ env.JIRA_URL }}/rest/api/3/issue/${{ steps.search.outputs.issue }}" \
            --header "Authorization: Basic <JIRA_AUTH_TOKEN>" \
            --header "Content-Type: application/json" | jq -r '.fields')
          
          # Get the Jira issue key associated with the pull request
          # Check if first_review_time field is empty for the issue
          first_review_time=$(curl -s --request GET \
            --url "${{ env.JIRA_URL }}/rest/api/3/issue/${{ steps.search.outputs.issue }}?fields=first_review_time" \
            --user "${{ env.JIRA_USER_EMAIL }}:${{ env.JIRA_API_TOKEN }}" \
            --header "Accept: application/json" \
            | jq -r '.fields.first_review_time')
          if [ "$first_review_time" == "null" ]; then
            # First review - update first_review_time field
            curl -s --request PUT \
            --url "${{ env.JIRA_URL }}/rest/api/3/issue/${{ steps.search.outputs.issue }}" \
            --user "${{ env.JIRA_USER_EMAIL }}:${{ env.JIRA_API_TOKEN }}" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data "{\"fields\":{\"first_review_time\":\"$(date -u +%FT%TZ)\"}}"
          fi
            
            # Check if second_review_time field is empty for the issue
          second_review_time=$(curl -s --request GET \
            --url "${{ env.JIRA_URL }}/rest/api/3/issue/${{ steps.search.outputs.issue }}?fields=second_review_time" \
            --user "${{ env.JIRA_USER_EMAIL }}:${{ env.JIRA_API_TOKEN }}" \
            --header "Accept: application/json" \
            | jq -r '.fields.second_review_time')
          if [ "$second_review_time" == "null" ]; then
            # Second review - update second_review_time field
            curl -s --request PUT \
            --url "${{ env.JIRA_URL }}/rest/api/3/issue/${{ steps.search.outputs.issue }}" \
            --user "${{ env.JIRA_USER_EMAIL }}:${{ env.JIRA_API_TOKEN }}" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data "{\"fields\":{\"second_review_time\":\"$(date -u +%FT%TZ)\"}}"
          fi

