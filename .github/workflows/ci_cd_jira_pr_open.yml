name: Create Jira issue on PR open
on:
  pull_request:
    types:
      - opened
      - review_requested
  pull_request_review:
    types:
      - submitted
jobs:
  create_jira_issue:
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Get PR details
        id: pr-details
        run: |
          echo "branch=${{ github.event.pull_request.head.ref }}" >> $GITHUB_OUTPUT
          echo "title=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
          echo 'DESCRIPTION<<EOF' >> $GITHUB_OUTPUT
          echo "${{ github.event.pull_request.body }}" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
          echo "assignee=${{ github.event.pull_request.user.login }}" >> $GITHUB_OUTPUT
          echo "number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          echo "reviewers=${{ join(github.event.pull_request.requested_reviewers.*.login, ',') }}" >> $GITHUB_OUTPUT
      - name: Create Jira issue for assignee
        id: create-assignee-issue
        env:
          DESCRIPTION: ${{ steps.pr-details.outputs.description }}
          ASSIGNEE: ${{ steps.pr-details.outputs.assignee }}
          PR_NUMBER: ${{ steps.pr-details.outputs.number }}
          PR_TITLE: ${{ steps.pr-details.outputs.title }}
        run: |
          key=${{ env.ASSIGNEE }}
          echo "ASSIGNEE: ${ASSIGNEE}"
          assignee_id=$(echo '${{ secrets.JIRA_GITHUB_MAPPING }}' | jq -r --arg key "${{ env.ASSIGNEE }}" '.[$key]')
          echo "ASSIGNEE ID: ${assignee_id}"
          echo "DESCRIPTION: ${{ env.DESCRIPTION }}"
          #Find all fields
          curl -s --request GET \
          --url "${{ env.JIRA_URL }}/rest/api/3/field" \
          --user "${{ env.JIRA_USER_EMAIL }}:${{ env.JIRA_API_TOKEN }}" \
          --header "Content-Type: application/json" > all_fields.json
          git fetch origin master
          lines_changed=$(git diff --shortstat origin/master HEAD | awk '{print $1 + $4}')
          files_changed=$(curl -s --request GET \
          --url "${{ github.api_url }}/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" \
          --header "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          --header "Accept: application/vnd.github.v3+json" | jq '. | length')
          files_changed_field_id=$(jq -r --arg name "files_changed" '.[] | select(.name == "files_changed") | .id' all_fields.json)
          lines_changed_field_id=$(jq -r --arg name "lines_changed" '.[] | select(.name == "lines_changed") | .id' all_fields.json)
          echo "lines_changed = ${lines_changed}"
          echo "files_changed = ${files_changed}"
          echo "files_changed_field_id = ${files_changed_field_id}"
          echo "lines_changed_field_id = ${lines_changed_field_id}"
          description=$(echo "${{ env.DESCRIPTION }}" | jq -sR '.')
          curl -s -X POST \
          --url "${{ env.JIRA_URL }}/rest/api/3/issue/" \
          --header "Content-Type: application/json" \
          --header "Accept: application/json" \
          --user "${{ env.JIRA_USER_EMAIL }}:${{ env.JIRA_API_TOKEN }}" \
          --data '{
            "fields": {
              "project": {
                "key": "'"${{ env.PROJECT_KEY }}"'"
              },
              "issuetype": {
                "name": "'"${{ env.ISSUE_TYPE }}"'"
              },
              "summary": "'"${GITHUB_REPOSITORY#${GITHUB_OWNER}}#${PR_NUMBER} - ${PR_TITLE}"'",
              "description": {
                "type": "doc",
                "version": 1,
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": '"${description}"'
                      }
                    ]
                  }
                ]
              },
              "assignee": {
                "accountId": "'"${assignee_id}"'"
              },
              "'"${files_changed_field_id}"'": '${files_changed}',
              "'"${lines_changed_field_id}"'": '${lines_changed}'
            }
          }' > jira-issue.json
          
          # Parse issue key from Jira response
          cat jira-issue.json
          assignee_issue_key=$(cat jira-issue.json | jq -r '.key')
          echo "assignee-issue-key=${assignee_issue_key}" >> $GITHUB_OUTPUT

  add_reviewer:
    if: github.event.action == 'review_requested'
    runs-on: ubuntu-latest
    env:
      PR_NUMBER: ${{ github.event.pull_request.number }}
      REVIEWER_LOGIN: ${{ github.event.review.user.login }}
      ASSIGNEE_LOGIN: ${{ github.event.pull_request.user.login }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Get assignee ID and reviewers logins
        id: pr-details
        run: |
          assignee=${{ github.event.pull_request.assignee.login }}
          creator=${{ github.event.pull_request.user.login }}
          assignee_id=null
          creator_id=null
          if [ "${assignee_login}" != '' ]
          then
            assignee_id=$(echo '${{ env.EV_JIRA_GITHUB_MAPPING }}' | jq -r --arg key "${{ github.event.pull_request.assignee.login }}" '.[$assignee]') >> $GITHUB_ENV  
          elif [ "${creator_login}" != '' ]
          then
            creator_id=$(echo '${{ env.EV_JIRA_GITHUB_MAPPING }}' | jq -r --arg key "${{ github.event.pull_request.user.login }}" '.[$creator]') >> $GITHUB_ENV
          fi
          echo "assignee_id=${assignee_id}" >> $GITHUB_ENV
          echo "reviewers=${{ join(github.event.pull_request.requested_reviewers.*.login, ',') }}" >> $GITHUB_OUTPUT
      - name: Search
        id: search
        uses: tomhjp/gh-action-jira-search@v0.2.2
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
        with:
          jql: 'project = "${{ env.PROJECT_KEY }}" AND text ~ "#${{ env.PR_NUMBER }} " AND (assignee = "${{ env.assignee_id }}" OR creator = "${{ env.creator_id }})'
      - name: Log
        run: echo "Found issue ${{ steps.search.outputs.issue }}"
      - name: Create reviewer subtask
        env:
          PARENT_ISSUE_ID: ${{ steps.search.outputs.issue }}
          REVIEWERS: ${{ steps.pr-details.outputs.reviewers }}
        run: |
          echo "issue_id=${{ env.PARENT_ISSUE_ID }}"
          for reviewer in $(echo "${{ env.REVIEWERS }}" | tr ',' '\n'); do
            echo "reviewer=${reviewer}"
            parent_issue=$(curl -s --request GET \
            --url "${{ env.JIRA_URL }}/rest/api/3/issue/${{ env.PARENT_ISSUE_ID }}" \
            --user "${{ env.JIRA_USER_EMAIL }}:${{ env.JIRA_API_TOKEN }}" \
            --header "Accept: application/json")
          
            subtasks=$(echo "${parent_issue}" | jq -r '.fields.subtasks')
            is_reviewer_assigned=false
            for subtask in $(echo "${subtasks}" | jq -r '.[] | @base64'); do
              _jq() {
                echo "${subtask}" | base64 --decode | jq -r "${1}"
              }
              subtask_key=$(_jq '.key')
              subtask_data=$(curl -s --request GET \
              --url "${{ env.JIRA_URL }}/rest/api/3/issue/${subtask_key}" \
              --user "${{ env.JIRA_USER_EMAIL }}:${{ env.JIRA_API_TOKEN }}" \
              --header "Accept: application/json")
              subtask_assignee=$(echo "${subtask_data}" | jq -r '.fields.assignee.accountId')
              key=${reviewer}
              reviewer_id=$(echo '${{ secrets.JIRA_GITHUB_MAPPING }}' | jq -r --arg key "${reviewer}" '.[$key]')
          
              echo "reviewer_id=${reviewer_id}"
              echo "subtask_assignee=${subtask_assignee}"
              if [[ "${subtask_assignee}" == "${reviewer_id}" ]]; then
                is_reviewer_assigned=true
                echo "Subtask already created for reviewer: ${reviewer}."
              fi
            done
          
            if [[ "${is_reviewer_assigned}" == false ]]; then
              echo "Subtask not yet created for reviewer: ${reviewer}. Creating subtask for reviewer."
              key="${reviewer}"
              reviewer_id=$(echo '${{ secrets.JIRA_GITHUB_MAPPING }}' | jq -r --arg key "${reviewer}" '.[$key]')
              echo "Reviewer: ${reviewer_id}"
              curl -s -X POST \
              --url "${{ env.JIRA_URL }}/rest/api/3/issue/" \
              --header "Content-Type: application/json" \
              --header "Accept: application/json" \
              --user "${{ env.JIRA_USER_EMAIL }}:${{ env.JIRA_API_TOKEN }}" \
              --data '{
                "fields": {
                  "project": {
                    "key": "'"${{ env.PROJECT_KEY }}"'"
                  },
                  "parent": {
                    "key": "'"${{ env.PARENT_ISSUE_ID }}"'"
                  },
                  "issuetype": {
                    "name": "'"${{ env.SUB_ISSUE_TYPE }}"'"
                  },
                  "summary": "'"${GITHUB_REPOSITORY#${GITHUB_OWNER}}#${PR_NUMBER} - ${{ github.event.pull_request.title }} - Reviewed by ${reviewer}"'",
                  "assignee": {
                    "accountId": "'"${reviewer_id}"'"
                  }
                }
              }' > jira-subtask.json
              cat jira-subtask.json
              SUBTASK_KEY=$(cat jira-subtask.json | jq -r '.key')
            fi
          done
  approve_received:
    if: github.event_name == 'pull_request_review' && github.event.review.state == 'approved'
    runs-on: ubuntu-latest
    env:
      PR_NUMBER: ${{ github.event.pull_request.number }}
      REVIEWER_LOGIN: ${{ github.event.review.user.login }}
      ASSIGNEE_LOGIN: ${{ github.event.pull_request.user.login }}
    steps:
      - name: Get reviewer ID
        id: get-reviewer-id
        run: |
          assignee_login=${{ github.event.pull_request.assignee.login }}
          creator_login=${{ github.event.pull_request.user.login }}
          assignee_id=$(echo '${{ env.EV_JIRA_GITHUB_MAPPING }}' | jq -r --arg key "${assignee_login}" '.[$assignee_login]') >> $GITHUB_ENV
          creator_id=$(echo '${{ env.EV_JIRA_GITHUB_MAPPING }}' | jq -r --arg key "${creator_login}" '.[$creator_login]') >> $GITHUB_ENV
          echo "assignee=${{ github.event.pull_request.user.login }}" >> $GITHUB_OUTPUT
      - name: Search
        id: search
        uses: tomhjp/gh-action-jira-search@v0.2.2
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
        with:
          jql: 'project = "${{ env.PROJECT_KEY }}" AND text ~ "#${{ env.PR_NUMBER }} " AND assignee = "${{ env.reviewer_id }}"'
      - name: Log
        run: echo "Found issue ${{ steps.search.outputs.issue }}"
      - name: Get Transition ID
        id: get-transition-id
        run: |
          curl --request GET \
            --url "${{ env.JIRA_URL }}/rest/api/3/issue/${{ steps.search.outputs.issue }}/transitions" \
            --user "${{ env.JIRA_USER_EMAIL }}:${{ env.JIRA_API_TOKEN }}" \
            --header "Accept: application/json" > transition.json
          cat transition.json
          transition_id=$(cat transition.json | jq -r '.transitions[] | select(.to.statusCategory.key == "done") | .id')
          echo "transition_id=${transition_id}" >> $GITHUB_ENV
          echo "transition_id = ${transition_id}"
      - name: Change reviewer issue status
        run: |
          curl -s --request POST \
          --url "${{ env.JIRA_URL }}/rest/api/3/issue/${{ steps.search.outputs.issue }}/transitions" \
          --user "${{ env.JIRA_USER_EMAIL }}:${{ env.JIRA_API_TOKEN }}" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data '{
            "transition": {
              "id": "${{ env.transition_id }}"
            },
            "fields": {}
          }' > transition.json
          cat transition.json
      - name: Get changed files
        id: changed-files
        run: echo "changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | wc -l)" >> $GITHUB_OUTPUT
      - name: Update first or second review time
        run: |
          # Get the pull request number
          PR_NUMBER=${{ github.event.pull_request.number }}
          echo "PR_NUMBER=${PR_NUMBER}"
          echo "github repository=${{ github.repository }}"
          REVIEWS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER}/reviews")
          APPROVAL_COUNT_OVERALL=$(echo "${REVIEWS}" | jq '[.[] | select(.state == "APPROVED")] | length')
          APPROVAL_COUNT=$(echo "${REVIEWS}" | jq --arg username "${{ env.REVIEWER_LOGIN }}" '. | map(select(.user.login == $username and .state == "APPROVED")) | length')
          echo "APPROVAL_COUNT=${APPROVAL_COUNT}";
          REVIEWED_REVIEWERS=$(echo "${REVIEWS}" | jq -r '.[].user.login' | sort | uniq | wc -l)
          echo "REVIEWED_REVIEWERS=${REVIEWED_REVIEWERS}";
          
          response=$(curl -s --request GET \
            --url "${{ env.JIRA_URL }}/rest/api/3/issue/${{ steps.search.outputs.issue }}" \
            --user "${{ env.JIRA_USER_EMAIL }}:${{ env.JIRA_API_TOKEN }}" \
            --header "Accept: application/json")
          parent_key=$(echo "$response" | jq -r '.fields.parent.key')
          echo "parent_key=${parent_key}"
          
          curl -s --request GET \
            --url "${{ env.JIRA_URL }}/rest/api/3/field" \
            --user "${{ env.JIRA_USER_EMAIL }}:${{ env.JIRA_API_TOKEN }}" \
            --header "Content-Type: application/json" > all_fields.json
          
          first_review_time_field_id=$(jq -r --arg name "first_review_time" '.[] | select(.name == "first_review_time") | .id' all_fields.json)
          echo "first_review_time_field_id=${first_review_time_field_id}"
          
          second_review_time_field_id=$(jq -r --arg name "second_review_time" '.[] | select(.name == "second_review_time") | .id' all_fields.json)
          echo "second_review_time_field_id=${second_review_time_field_id}"
          
          # First review - update first_review_time field                    
          response=$(curl -s --request GET \
            --url "${{ env.JIRA_URL }}/rest/api/3/issue/${{ steps.search.outputs.issue }}" \
            --user "${{ env.JIRA_USER_EMAIL }}:${{ env.JIRA_API_TOKEN }}" \
            --header "Accept: application/json")
          first_review_time=$(echo "$response" | jq -r ".fields.${first_review_time_field_id}")
          echo "first_review_time=$first_review_time"
          # Second review - update second_review_time field          
          second_review_time=$(echo "$response" | jq -r ".fields.${second_review_time_field_id}")
          echo "second_review_time = ${second_review_time}"
          
          if [ "$((APPROVAL_COUNT))" == 1 ]; then
            if [ "$((REVIEWED_REVIEWERS))" == 1 ]; then
              curl -s --request PUT \
              --url "${{ env.EV_JIRA_URL }}/rest/api/3/issue/${parent_key}" \
              --user "${{ env.EV_JIRA_USER_EMAIL }}:${{ env.EV_JIRA_API_TOKEN }}" \
              --header "Accept: application/json" \
              --header "Content-Type: application/json" \
              --data '{
                "fields":{
                  "'"${first_review_time_field_id}"'": "'"$(date +'%Y-%m-%dT%H:%M:%S.000%z')"'"
                }
              }'
            fi
            if [ "(($REVIEWED_REVIEWERS))" == 2 ]; then
              curl -s --request PUT \
              --url "${{ env.EV_JIRA_URL }}/rest/api/3/issue/${parent_key}" \
              --user "${{ env.EV_JIRA_USER_EMAIL }}:${{ env.EV_JIRA_API_TOKEN }}" \
              --header "Accept: application/json" \
              --header "Content-Type: application/json" \
              --data '{
                "fields": {
                  "'"${second_review_time_field_id}"'": "'"$(date +'%Y-%m-%dT%H:%M:%S.000%z')"'"
                }
              }'
            fi
          fi
